#!/usr/bin/env bash
# ---------------------------------------------------------------
# Alf - Your Little Bash Alias Friend
# ---------------------------------------------------------------
usage() { 
  if $LONG_USAGE; then
    printf "alf $VERSION - Your Little Bash Alias Friend\n\n"
  fi
  printf "Usage:\n"
  printf "  alf connect REPO [-y]\n"
  if $LONG_USAGE; then
    printf "    Connect to a remote git repository.\n"
    printf "    REPO can be:\n"
    printf "    - Your username on GitHub. In this case, we will assume the\n"
    printf "      repository is named 'alf-config'\n"
    printf "    - Your username/repo on GitHub\n"
    printf "    - Any other full URL to a repository\n"
    printf "    In case the -y flag is specified, the operation will be\n"
    printf "    executed without prompting for confirmation.\n\n"
  fi
  printf "  alf download\n"
  if $LONG_USAGE; then
    printf "    Perform 'git pull' on a previously connected repo\n\n"
  fi
  printf "  alf upload\n"
  if $LONG_USAGE; then
    printf "    Perform 'git commit' and 'git push' on a previously connected\n"
    printf "    repo\n\n"
  fi
  printf "  alf generate\n"
  if $LONG_USAGE; then
    printf "    Generate aliases from the config file in the connected repo\n"
    printf "    to stdout\n\n"
  fi
  printf "  alf save\n"
  if $LONG_USAGE; then
    printf "    Generate aliases and save to ~/.bash_aliases\n\n"
  fi
  printf "  alf -h|--help\n"
  if $LONG_USAGE; then
    printf "    Show this message\n\n"
  fi
  printf "  alf -v|--version\n"
  if $LONG_USAGE; then
    printf "    Show version number\n\n"
  fi
}

find_config() {
  REPO_PATH="$PWD/alf-conf"
  CONFIG_FILE="alf.conf"
  if [[ -f $RC_FILE ]]; then
    REPO_PATH=$(<$RC_FILE)
    CONFIG_FILE=$REPO_PATH/alf.conf
  fi

  if [[ ! -f $CONFIG_FILE ]]; then
    printf "ERROR: Cannot find config file.\n\n"
    echo "You should either:"
    echo "- Run this command in a folder with 'alf.conf' file, or"
    echo "- Run 'alf connect' to properly connect to a remote config"
    exit 1
  fi
}

generate_last_cmd() {
  if [[ -n $lastcmd ]]; then
    if [[ $cond = "if" ]]; then
      echo "  $lastcmd \"\$@\""
      echo "}"
    else
      echo "  else"
      echo "    $lastcmd \"\$@\""
      echo "  fi"
      echo "}"
      cond="if"
    fi
  fi
}

generate() {
  regex="^(\s*)([a-z\-]+):\s*(.+)$"
  cond="if"
  lastcmd=""
  find_config

  while IFS= read -r line; do
    if [[ $line =~ $regex ]]; then
      indent="${BASH_REMATCH[1]}"
      
      if [[ -z $indent ]]; then
        ali1="${BASH_REMATCH[2]}"
        cmd1="${BASH_REMATCH[3]}"
        local_regex="^$ali1(\s+|$)"
        if [[ $cmd1 =~ $local_regex ]]; then
          cmd1="command $cmd1"
        fi
        unset ali2 cmd2
        generate_last_cmd
        lastcmd=$cmd1
      else
        ali2="${BASH_REMATCH[2]}"
        cmd2="${BASH_REMATCH[3]}"
      fi

      if [[ -n $ali2 ]]; then
        echo "  $cond [[ \$1 = \"$ali2\" ]]; then"
        echo "    shift"
        echo "    $cmd1 $cmd2 \"\$@\""
        cond="elif"
      else
        echo ""
        echo "$ali1() {"
      fi
    fi
  done < $CONFIG_FILE
  generate_last_cmd
}

make_full_repo_path() {
  if [[ -z $REPO ]]; then
    echo "ERROR: Please provide a repo name or URL."
    exit 1
  elif [[ $REPO =~ ':' ]]; then
    REPO_URL=$REPO
  elif [[ $REPO =~ '/' ]]; then
    REPO_URL="https://github.com/$REPO.git"
  else
    REPO_URL="https://github.com/$REPO/alf-conf.git"
  fi
}

download() {
  find_config
  if [[ ! -f $RC_FILE ]]; then
    echo "Cannot find $RC_FILE"
    echo "Please connect alf to a repository first"
    exit 1
  fi
  pushd $REPO_PATH > /dev/null
  echo "Pulling from repository to $REPO_PATH"
  git pull
  popd > /dev/null
  save
}

upload() {
  find_config
  if [[ ! -f $RC_FILE ]]; then
    echo "Cannot find $RC_FILE"
    echo "Please connect alf to a repository first"
    exit 1
  fi
  pushd $REPO_PATH > /dev/null
  echo "Pushing $REPO_PATH to repository"
  git commit -am "automatic push"
  git push
  popd > /dev/null
}

connect() {
  make_full_repo_path
  if [[ $FORCE != "-y" ]]; then
    echo "This operation will:"
    if [[ ! -d ./alf-conf ]]; then
      echo "  clone  $REPO_URL"
      echo "     to  ./alf-conf"
    fi
    echo "  write  $PWD/alf-conf"
    echo "     to  $RC_FILE"
    echo ""
    printf "Continue? [yN] "
    read answer
  else
    answer=y
  fi

  if [[ $answer =~ [Yy] ]]; then
    if [[ -d ./alf-conf ]]; then
      echo "Skipping clone, directory already exists"
    else
      git clone $REPO_URL ./alf-conf
    fi
    echo "$PWD/alf-conf" > "$RC_FILE"
    echo "Storing location in $RC_FILE"
  else
    echo "Aborting"
    exit
  fi
  save
}

save() {
  find_config
  echo "Saving to $ALIASES_FILE"
  generate > $ALIASES_FILE
  echo "To apply new aliases to the current session, run:"
  echo "$ source ~/.bash_aliases"
}

initialize() {
  VERSION="0.0.2"
  LONG_USAGE=false
  REPO=${ALF_REPO:=''}
  ALIASES_FILE=${ALF_ALIASES_FILE:=~/.bash_aliases}
  RC_FILE=${ALF_RC_FILE:=~/.alfrc}
  set -e
}

run() {
  case "$1" in
    c | connect  ) REPO=$2; FORCE=$3; connect ;;
    d | download ) download ;;
    g | generate ) generate ;;
    s | save     ) save ;;
    u | upload   ) upload ;;
    -h | --help    | help    ) LONG_USAGE=true; usage ;;
    -v | --version | version ) echo $VERSION ;;
    * ) usage ;;
  esac
}

initialize

if [[ $ALF_SUPRESS_RUN -ne 1 ]]; then
  run $@
fi
