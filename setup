#!/usr/bin/env bash

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }

section() {
  printf "\n=== %s\n" "$(green_bold "$@")"
}

copy() {
  printf "%s => %s\n" "$(blue "$(printf '%-25s' "$1")")" "$2"
  cp "$origin/$1" "$2"
}

sudo_copy() {
  printf "%s => %s\n" "$(blue "$(printf '%-25s' "$1")")" "$2"
  $sudo cp "$origin/$1" "$2"
}

copy_executable() {
  sudo_copy "$1" "/usr/local/bin/"
  $sudo chmod a+x "/usr/local/bin/$1"
}

copy_man() {
  if [[ ! -d "/usr/local/share/man/man1/" ]]; then return; fi

  for file in "$1"/*.1; do
    sudo_copy "$file" "/usr/local/share/man/man1/"
  done

  $sudo makewhatis /usr/local/man || true
}

command_exist() {
  [[ -x "$(command -v "$1")" ]]
}

need() {
  command_exist "$1" || fail "Cannot run $1"
  printf "%s found\n" "$(blue "    $1")"
}

onerror() {
  local exit_status=$?
  printf "\n=== %s\n" "$(red "Aborted with exit status $exit_status")"
  exit $exit_status
}

fail() {
  printf "$(red 'ERR') %s\n" "$*"
  return 1
}

initialize() {
  set -e
  trap 'onerror' ERR

  # Figure out if we need sudo or not
  sudo=''
  if [[ $EUID -ne 0 ]]; then
    sudo='sudo'
  fi

  repo="$1"
  repo_url="https://github.com/${repo}.git"
  origin=$(mktemp -d)
}

section "Initializing"
initialize "DannyBen/alf"

section "Checking for pre-requisites"
need git

section "Cloning $repo"
git clone --depth 1 "$repo_url" "$origin"

section "Copying files"
copy_executable 'alf'
copy_man 'doc'

section "Done"
alf --version
